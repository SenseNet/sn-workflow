#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SenseNet.Workflow
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SenseNetContentRepository")]
	public partial class WorkflowDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkflowNotification(WorkflowNotification instance);
    partial void UpdateWorkflowNotification(WorkflowNotification instance);
    partial void DeleteWorkflowNotification(WorkflowNotification instance);
    #endregion
		
		public WorkflowDataClassesDataContext() : 
				base(global::SenseNet.Workflow.Properties.Settings.Default.SenseNetContentRepositoryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WorkflowDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkflowDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkflowDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkflowDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkflowNotification> WorkflowNotifications
		{
			get
			{
				return this.GetTable<WorkflowNotification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowNotification")]
	public partial class WorkflowNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationId;
		
		private int _NodeId;
		
		private System.Guid _WorkflowInstanceId;
		
		private string _WorkflowNodePath;
		
		private string _BookmarkName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    partial void OnNodeIdChanging(int value);
    partial void OnNodeIdChanged();
    partial void OnWorkflowInstanceIdChanging(System.Guid value);
    partial void OnWorkflowInstanceIdChanged();
    partial void OnWorkflowNodePathChanging(string value);
    partial void OnWorkflowNodePathChanged();
    partial void OnBookmarkNameChanging(string value);
    partial void OnBookmarkNameChanged();
    #endregion
		
		public WorkflowNotification()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", DbType="Int NOT NULL")]
		public int NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this.OnNodeIdChanging(value);
					this.SendPropertyChanging();
					this._NodeId = value;
					this.SendPropertyChanged("NodeId");
					this.OnNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowInstanceId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkflowInstanceId
		{
			get
			{
				return this._WorkflowInstanceId;
			}
			set
			{
				if ((this._WorkflowInstanceId != value))
				{
					this.OnWorkflowInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._WorkflowInstanceId = value;
					this.SendPropertyChanged("WorkflowInstanceId");
					this.OnWorkflowInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowNodePath", DbType="NVarChar(450) NOT NULL", CanBeNull=false)]
		public string WorkflowNodePath
		{
			get
			{
				return this._WorkflowNodePath;
			}
			set
			{
				if ((this._WorkflowNodePath != value))
				{
					this.OnWorkflowNodePathChanging(value);
					this.SendPropertyChanging();
					this._WorkflowNodePath = value;
					this.SendPropertyChanged("WorkflowNodePath");
					this.OnWorkflowNodePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookmarkName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BookmarkName
		{
			get
			{
				return this._BookmarkName;
			}
			set
			{
				if ((this._BookmarkName != value))
				{
					this.OnBookmarkNameChanging(value);
					this.SendPropertyChanging();
					this._BookmarkName = value;
					this.SendPropertyChanged("BookmarkName");
					this.OnBookmarkNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
